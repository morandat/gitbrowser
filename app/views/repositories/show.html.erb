<style type="text/css" media="screen">
  a.comment_line {
      color: rgba(155,0,0,1);
  }
  .warning_sel {
      position:   absolute;
      background: rgba(255,255,100,0.5);
      z-index:    20
  }
  .error_sel {
      position:   absolute;
      background: rgba(255,50,50,0.5);
      z-index:    40
  }
  .ace_selection {
      background: rgba(0,0,0,0.1) !important;
  }
  .viewer_tooltip {
      background-color: #FCC;
      border: 1px solid gray;
      border-radius: 1px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      color: black;
      max-width: 100%;
      padding: 3px 4px;
      position: absolute;
      z-index: 999999;
      box-sizing: border-box;
      cursor: default;
      white-space: pre;
      word-wrap: break-word;
      line-height: normal;
      font-style: normal;
      font-weight: normal;
      letter-spacing: normal;
      pointer-events: none;
  }
  .viewer_overlay {
      position:absolute;
      z-index: 100;
      padding: 5px;
      max-width: 400px;
      border: 1px solid black;
      background-color: rgba(255, 255, 255, 0.7);
  }
</style>

<div style="display:flex">

  <div style="display: flex;
              flex-direction: column;">
    <div>
      <a href="/repositories/">Repository&nbsp;:</a> <%= @repository.address %>
      <input type="hidden" id="repository_id" value="<%= @repository.id %>"/>
      <input type="hidden" id="revision" value=""/>
      <input type="hidden" id="filename" value=""/>
    </div>

    <div>
      <%= select(:revision, :selector, @revisions,
          { include_blank: true },
          { onChange: "fetch_file_list()" })
          %>
    </div>

    <div style="height: 500px;">
      <ul id="file_tree">

      </ul>
    </div>
  </div>

  <div id="viewer" style="height: 900px; width: 900px">

  </div>

  <div id="overlays">

  </div>

  <div id="tooltip" class="viewer_tooltip" style="display:none">

  </div>

  <div>
    <button id="warning_button">Highlight warning</button>
    <button id="error_button">Highlight error</button>

    <div id="comments">

    </div>
  </div>

</div>

<script>
  var viewer = ace.edit("viewer");
  var comments = {}; // Dict to centralize the comments
  viewer.setReadOnly(true);
  viewer.$blockScrolling = Infinity; // fix logs
  viewer.setOptions({
      highlightActiveLine: false,
      fontSize: "13pt",
      theme: 'ace/theme/chrome',
  });
  viewer.renderer.setAnimatedScroll(true);

  function fetch_file_list() {
      const revision = $('#revision_selector').val();
      $.ajax({
          dataType: 'json',
          url: '/repositories/fetch_file_list' +
              '?id=' + $("#repository_id").val() +
              '&revision=' + revision })
          .done(function(data) {
              $("#revision").val(revision);
              load_files(data);
          });
  }

  function clear_comment(id) {
      const comment = comments[id];
      viewer.getSession().removeMarker(comment.marker_id);
      comment.anchor.detach();
      $("#comment_" + id).remove();
      $("#overlay_" + id).remove();
      delete comments[id];
  }

  function clear_comments() {
      Object.keys(comments).forEach(clear_comment);
  }

  function init_viewer(data) {
      viewer.setValue(data);
      viewer.session.setMode("ace/mode/python");
      viewer.clearSelection();
      viewer.navigateFileStart();
      clear_comments();
  }

  function load_file(filename, revision) {
      $.ajax({
          dataType: 'text',
          url : '/repositories/fetch_file' +
              '?id=' + $("#repository_id").val() +
              '&revision=' + revision +
              "&file=" + filename })
          .done(function(data) {
              $("#filename").val(filename);
              init_viewer(data);
              load_comments(filename, revision);
          });
  }

  function load_files(data) {
      $("#file_tree").empty();
      const revision = $("#revision_selector").val();
      const keys = Object.keys(data);

      function fill_level(level) {
          const els = keys.filter((el) => data[el].parent == level);
          els.forEach(function (el) {
              const txtel = data[el].name;
              const domel = (level == "") ? $("#file_tree") : $("ul[data-file='" + level + "']");
              if(data[el].is_dir) {
                  domel.append($('<li>').text(txtel))
                      .append($('<ul data-file="' + el + '">'));
                  fill_level(el);
              } else {
                  const tel = data[el].has_comm ? "<a data-file='" + el + "' class='comment_line'>" +
                        txtel + "</a>" : "<a data-file='" + el + "'>" + txtel + "</a>";
                  domel.append($('<li>').html(tel));
              }
          });
      }

      fill_level("");
      $("#file_tree a").click((event) =>
                              load_file($(event.target).data("file"),
                                        $("#revision").val()));
  }

  function create_new_comment(comment) {
      const Range = require("ace/range").Range;
      const range = new Range(comment.range.start.row,
                              comment.range.start.column,
                              comment.range.end.row,
                              comment.range.end.column);
      const marker = viewer.session.addMarker(range, comment.ctype + "_sel", "line");
      const div = "<a data-comment_id='" + comment.id + "'>&#10060;</a> " +
            "<input type='text' value='" + comment.description +
            "' onChange='save_comment_description(" + comment.id + ")'/>" +
            "(l. " + comment.range.start.row +
            "-" + comment.range.end.row + ")";
      $("#comments").append($("<div id='comment_" + comment.id + "'>").html(div));
      comments[comment.id] = { marker_id: marker,
                               range: range,
                               desc: comment.description };
      $("#comment_" + comment.id + " a").click(destroy_comment);
      $("a[data-file='" + comment.file + "']").addClass("comment_line");
      create_overlay(comment.id);
  }

  function save_new_comment(type) {
      return function () {
          const range = viewer.getSelectionRange();
          $.ajax({
              dataType: 'json',
              url: '/repositories/add_comment' +
                  '?id=' + $("#repository_id").val() +
                  '&revision=' + $("#revision").val() +
                  "&file=" + $("#filename").val() +
                  "&range=" + JSON.stringify(range) +
                  "&type=" + type})
              .done(create_new_comment);
      }
  }

  function save_comment_description(comment_id) {
      const text = $("#comments div#comment_" + comment_id + " input").val();
      $.ajax({
              dataType: 'json',
          url: '/repositories/save_comment_description' +
              '?id=' + $("#repository_id").val() +
              '&comment_id=' + comment_id +
              '&description=' + text })
          .done(() => {
              const comment = comments[comment_id];
              comment.desc = text;
              $("#overlay_" + comment_id).html(comment.desc);
              alert("saved");
          });
  }

  function destroy_comment(event) {
      const comment_id = $(event.target).data("comment_id");
      $.ajax({
          dataType: 'json',
          url: '/repositories/del_comment' +
              '?id=' + $("#repository_id").val() +
              '&comment_id=' + comment_id })
          .done(function () {
	      clear_comment(comment_id);
              if ($("#comments a").length == 0)
                  $("a[data-file='" + $("#filename").val() + "']").
		     removeClass("comment_line");
          });
  }

  function load_comments(filename, revision) {
      $.ajax({
          dataType: 'json',
          url: '/repositories/fetch_comments' +
              '?id=' + $("#repository_id").val() +
              '&revision=' + revision +
              "&file=" + filename })
          .done(function(data) {
              $("#comments").empty();
              data.forEach(create_new_comment);
          });
  }

  // function update_tooltip(position, text){
  //       var div = $('#tooltip')[0];
  //       div.style.left = position.pageX + 'px';
  //       div.style.top = position.pageY + 'px';
  //       if (text) {
  //               div.style.display = "block";
  //               div.innerText = text;
  //       } else {
  //               div.style.display = "none";
  //               div.innerText = "";
  //       }
  // }

  function update_overlay(id, position){
      var div = $("#overlay_" + id)[0];
      div.style.display = "";
      div.style.left = (position.pageX + 700) + 'px';
      div.style.top = position.pageY + 'px';
  }

  function create_overlay(id) {
      const comment = comments[id];
      var session = viewer.getSession();
      var document = session.getDocument();
      var anchor = document.createAnchor(comment.range.start.row, 0);
      comment.anchor = anchor;

      $('<div id="overlay_' + id + '" class="viewer_overlay"></div>').
          appendTo('#overlays');
      var over = $("#overlay_" + id);
      over.html(comment.desc); // Set the description

      update_overlay(id, viewer.renderer.
                     textToScreenCoordinates(anchor.getPosition()));
      session.on("changeScrollTop", function(scrollTop){
          update_overlay(id, viewer.renderer.
                         textToScreenCoordinates(anchor.getPosition()));
      });

  }

  <% if @selected_revision %>
    $("#revision_selector").val("<%= @selected_revision %>");
    fetch_file_list();
  <% end %>
  <% if @selected_file %>
    load_file("<%= @selected_file %>", "<%= @selected_revision %>");
  <% end %>

  $("#warning_button").click(save_new_comment("warning"));
  $("#error_button").click(save_new_comment("error"));

  // viewer.on("mousemove", function (e){
  //     var pos = e.getDocumentPosition();
  //     if (pos) {
  //         const up = Object.keys(comments).some((m) => {
  //             const mark = comments[m];
  //             if (mark.range.contains(pos.row, pos.column)) {
  //                 const pixelpos = viewer.renderer.textToScreenCoordinates(pos);
  //                 pixelpos.pageY += viewer.renderer.lineHeight;
  //                 update_tooltip(pixelpos, mark.desc);
  //                 return true;
  //             } else return false;
  //         });
  //         if (!up) update_tooltip(pos);
  //     }
  // });

</script>
